se_kurt <- z %>%
dplyr::select(contains("accuracy[seKurt"))
se_kurt <- se_kurt[1,1]
normality$skew_z_accuracy <- normality$skew_accuracy/se_skew
normality$kurt_z_accuracy <- normality$kurt_accuracy/se_kurt
rm(y, z, skew, kurt, se_skew, se_kurt, myRownames)
#----NORMALITY FOR attentional cost  ------
#Extract Skewness and Kurtosis together with Standard Errors
y <- descriptives(formula = cost_ben_val ~ condition:stimuli_type:cost_benefit, ATTENTION, skew = T, kurt = T)
z <- y$descriptives$asDF #save as a dataframe but note it will save all values as separate columns
skew <-  z %>%
dplyr::select(contains("cost_ben_val[skew") & contains("cost]")) #select all skewness values - should be 6 for 3x of trial sensory types per condition PC and VR
kurt <-  z %>%
dplyr::select(contains("cost_ben_val[kurt") & contains("cost]")) #select all kurtosis values - should be 6 for 3x of trial sensory types per condition PC and VR
normality_cost_ben <- data.frame(matrix(nrow = length(t(skew)))) #make a dataframe to store the skewness and kurtosis values
normality_cost_ben$skew_cost <- t(skew)[1:length(skew)] #paste the skewness and kurtosis values
normality_cost_ben$kurt_cost <- t(kurt)[1:length(kurt)]
#extract the SE for skewness and kurtosis - should be the same for all trial types so only one is enough
se_skew <- z %>%
dplyr::select(contains("cost_ben_val[seSkew"))
se_skew <- se_skew[1,1]
se_kurt <- z %>%
dplyr::select(contains("cost_ben_val[seKurt"))
se_kurt <- se_kurt[1,1]
# calculate the skewness and kurtosis z-scores by dividing the skewness and kurtosis values by their respective SEs
normality_cost_ben$skew_z_cost <- normality_cost_ben$skew_cost/se_skew
normality_cost_ben$kurt_z_cost <- normality_cost_ben$kurt_cost/se_kurt
# make the data frame neat
normality_cost_ben <- normality_cost_ben[,-1] #delete the first redundant column
myRownames <- colnames(skew) #extract column names from one of the variables to use them as rownames
myRownames <- gsub("\\[|]", "",  # get rid of redundant information
gsub("cost_ben_val", "",
gsub("skew", "", myRownames)))
rownames(normality_cost_ben) <- myRownames
rm(y, z, skew, kurt, se_skew, se_kurt) #clean objects for reuse
#----NORMALITY FOR attentional benefit  ------
#Extract Skewness and Kurtosis together with Standard Errors
y <- descriptives(formula = cost_ben_val ~ condition:stimuli_type:cost_benefit, ATTENTION, skew = T, kurt = T)
z <- y$descriptives$asDF #save as a dataframe but note it will save all values as separate columns
skew <-  z %>%
dplyr::select(contains("cost_ben_val[skew") & contains("benefit]")) #select all skewness values - should be 6 for 3x of trial sensory types per condition PC and VR
kurt <-  z %>%
dplyr::select(contains("cost_ben_val[kurt") & contains("benefit]")) #select all kurtosis values - should be 6 for 3x of trial sensory types per condition PC and VR
normality_cost_ben$skew_ben <- t(skew)[1:length(skew)] #paste the skewness and kurtosis values
normality_cost_ben$kurt_ben <- t(kurt)[1:length(kurt)]
#extract the SE for skewness and kurtosis - should be the same for all trial types so only one is enough
se_skew <- z %>%
dplyr::select(contains("cost_ben_val[seSkew"))
se_skew <- se_skew[1,1]
se_kurt <- z %>%
dplyr::select(contains("cost_ben_val[seKurt"))
se_kurt <- se_kurt[1,1]
# calculate the skewness and kurtosis z-scores by dividing the skewness and kurtosis values by their respective SEs
normality_cost_ben$skew_z_ben <- normality_cost_ben$skew_ben/se_skew
normality_cost_ben$kurt_z_ben <- normality_cost_ben$kurt_ben/se_kurt
rm(y, z, skew, kurt, se_skew, se_kurt) #clean objects
#-----TABLES--------
#Make a table with the skewness and kurtosis z-scores to check whether any values are larger that 1.96 or smaller than -1.96
kable(normality[,c(3:4, 7:8)], caption = "Skewness and kurtosis z-values for RT medians and accuracy variables")
kable(normality_RTCV[,c(3:4)], caption = "Skewness and kurtosis values for RTCV")
kable(normality_cost_ben[,c(3:4, 7:8)], caption = "Skewness and kurtosis z-values for attentional cost and benefits")
#-------Levene's Test ----------
# We are using the Levene's test to check for differences in variance between the two groups. This is to ensure that the assumption of homogeneity of variance is met.
#----Reaction Time Meadian----
ATTENTION %>%
group_by(stimuli_type) %>%
levene_test(RT_md ~ condition)
#----Reaction Time Coefficient of Variance----
levene_test(ATTENTION, RTCV ~ condition)
#----Accuracy----
ATTENTION %>%
group_by(stimuli_type) %>%
levene_test(accuracy ~ condition)
#----Attentional Cost----
ATTENTION %>%
filter(cost_benefit == "cost") %>%
group_by(stimuli_type) %>%
levene_test(cost_ben_val ~ condition)
#----Attentional Benefit----
ATTENTION %>%
filter(cost_benefit == "benefit") %>%
group_by(stimuli_type) %>%
levene_test(cost_ben_val ~ condition)
mean_RT <- as.data.frame(ATTENTION %>%
group_by(stimuli_type, ID, condition) %>%
summarise(mean_RT_type=mean(RT_md)))
anova_test(mean_RT, dv = mean_RT_type, wid = ID, within = c(condition, stimuli_type))
mean_accuracy <- as.data.frame(ATTENTION %>%
group_by(stimuli_type, ID, condition) %>%
summarise(mean_acc_type=mean(accuracy)))
anova_test(mean_accuracy, dv = mean_acc_type, wid = ID, within = c(condition, stimuli_type))
mean_att_cost <- as.data.frame(ATTENTION %>%
filter(cost_benefit == "cost") %>%
group_by(stimuli_type, ID, condition) %>%
summarise(mean_att_cost_type=mean(cost_ben_val)))
anova_test(mean_att_cost, dv = mean_att_cost_type, wid = ID, within = c(condition, stimuli_type))
mean_att_ben <- as.data.frame(ATTENTION %>%
filter(cost_benefit == "benefit") %>%
group_by(stimuli_type, ID, condition) %>%
summarise(mean_att_ben_type=mean(cost_ben_val)))
anova_test(mean_att_ben, dv = mean_att_ben_type, wid = ID, within = c(condition, stimuli_type))
mean_RT$stimuli_type <- as.factor(mean_RT$stimuli_type)
mean_RT$condition <- as.factor(mean_RT$condition)
mean_RT$ID <- as.factor(mean_RT$ID)
mean_RT2 <- mean_RT %>%
group_by(stimuli_type, condition) %>%
summarise(sd = sd(mean_RT_type),
mean_RT_type = mean(mean_RT_type))
mean_RT2 <- mean_RT2 %>% arrange(mean_RT2$condition)
p1 <- ggplot(mean_RT, aes(x = stimuli_type, y = mean_RT_type)) +
geom_violin(aes(fill = stimuli_type), alpha = 0.4, trim = FALSE, color = NA) + #show.legend = FALSE,
geom_jitter(aes(color = stimuli_type), position = position_jitter(0.3), alpha = 0.8) +
facet_wrap(~condition) +
labs(x = "Stimuli Type", y = "Search Time", color = "Stimuli Type") +
theme_bw() +
guides(fill = FALSE) +
scale_color_manual(values = c("#0072B2", "#E69F00", "#009E73")) +
scale_fill_manual(values = c("#0072B2", "#E69F00", "#009E73")) +
theme(legend.position="none")
p1 + geom_pointrange(aes(ymin = (mean_RT_type - (sd * 1.96)/sqrt(50)), ymax = (mean_RT_type + (sd * 1.96)/sqrt(50))), data = mean_RT2)
m1 = lme(mean_RT_type ~ condition * stimuli_type, random= ~1|ID, data=mean_RT)
Anova(m1, type=c("III"))
#format( 8.097e-05, scientific = FALSE)
bayes_m1 <- anovaBF(mean_RT_type ~ condition * stimuli_type + ID,
data = mean_RT, whichRandom = "ID") # Bayesian mixed effects ANOVA
bayes_m1
bayes_m1 <- anovaBF(mean_RT_type ~ condition,
data = mean_RT, whichRandom = "ID") # Bayesian mixed effects ANOVA
bayes_m1
bayes_m1 <- anovaBF(mean_RT_type ~ condition + ID,
data = mean_RT, whichRandom = "ID") # Bayesian mixed effects ANOVA
bayes_m1
p1 + geom_pointrange(aes(ymin = (mean_RT_type - (sd * 1.96)/sqrt(50)), ymax = (mean_RT_type + (sd * 1.96)/sqrt(50))), data = mean_RT2)
p1 <- ggplot(mean_RT, aes(x = stimuli_type, y = mean_RT_type)) +
geom_violin(aes(fill = stimuli_type), alpha = 0.4, trim = FALSE, color = NA) + #show.legend = FALSE,
geom_jitter(aes(color = stimuli_type), position = position_jitter(0.2), alpha = 0.8) +
facet_wrap(~condition) +
labs(x = "Stimuli Type", y = "Search Time", color = "Stimuli Type") +
theme_bw() +
guides(fill = FALSE) +
scale_color_manual(values = c("#0072B2", "#E69F00", "#009E73")) +
scale_fill_manual(values = c("#0072B2", "#E69F00", "#009E73")) +
theme(legend.position="none")
p1 + geom_pointrange(aes(ymin = (mean_RT_type - (sd * 1.96)/sqrt(50)), ymax = (mean_RT_type + (sd * 1.96)/sqrt(50))), data = mean_RT2)
Anova(m1, type=c("III"))
str(mena_RT)
str(mean_RT)
mean_RT$stimuli_type <- as.factor(mean_RT$stimuli_type)
mean_RT$condition <- as.factor(mean_RT$condition)
#mean_RT$ID <- as.factor(mean_RT$ID)
mean_RT2 <- mean_RT %>%
group_by(stimuli_type, condition) %>%
summarise(sd = sd(mean_RT_type),
mean_RT_type = mean(mean_RT_type))
mean_RT2 <- mean_RT2 %>% arrange(mean_RT2$condition)
p1 <- ggplot(mean_RT, aes(x = stimuli_type, y = mean_RT_type)) +
geom_violin(aes(fill = stimuli_type), alpha = 0.4, trim = FALSE, color = NA) + #show.legend = FALSE,
geom_jitter(aes(color = stimuli_type), position = position_jitter(0.2), alpha = 0.8) +
facet_wrap(~condition) +
labs(x = "Stimuli Type", y = "Search Time", color = "Stimuli Type") +
theme_bw() +
guides(fill = FALSE) +
scale_color_manual(values = c("#0072B2", "#E69F00", "#009E73")) +
scale_fill_manual(values = c("#0072B2", "#E69F00", "#009E73")) +
theme(legend.position="none")
p1 + geom_pointrange(aes(ymin = (mean_RT_type - (sd * 1.96)/sqrt(50)), ymax = (mean_RT_type + (sd * 1.96)/sqrt(50))), data = mean_RT2)
m1 = lme(mean_RT_type ~ condition * stimuli_type, random= ~1|ID, data=mean_RT)
Anova(m1, type=c("III"))
#format( 8.097e-05, scientific = FALSE)
bayes_m1 <- anovaBF(mean_RT_type ~ condition + ID,
data = mean_RT, whichRandom = "ID") # Bayesian mixed effects ANOVA
bayes_m1
bayes_m1 <- anovaBF(mean_RT_type ~ condition * stimuli_type + ID,
data = mean_RT, whichRandom = "ID") # Bayesian mixed effects ANOVA
bayes_m1
bayes_m1 <- anovaBF(mean_RT_type ~ condition * stimuli_type,
data = mean_RT, whichRandom = "ID") # Bayesian mixed effects ANOVA
bayes_m1
bayes_m1 <- anovaBF(mean_RT_type ~ condition * stimuli_type + ID,
data = mean_RT, whichRandom = "ID") # Bayesian mixed effects ANOVA
bayes_m1
View(mean_RT)
setwd("~/6. VR Study/VR_Method/VR_Method")
write.csv(mean_RT, "mean_RT.csv")
mean_RT$stimuli_type <- as.factor(mean_RT$stimuli_type)
mean_RT$condition <- as.factor(mean_RT$condition)
mean_RT$ID <- as.factor(mean_RT$ID)
mean_RT2 <- mean_RT %>%
group_by(stimuli_type, condition) %>%
summarise(sd = sd(mean_RT_type),
mean_RT_type = mean(mean_RT_type))
mean_RT2 <- mean_RT2 %>% arrange(mean_RT2$condition)
p1 <- ggplot(mean_RT, aes(x = stimuli_type, y = mean_RT_type)) +
geom_violin(aes(fill = stimuli_type), alpha = 0.4, trim = FALSE, color = NA) + #show.legend = FALSE,
geom_jitter(aes(color = stimuli_type), position = position_jitter(0.2), alpha = 0.8) +
facet_wrap(~condition) +
labs(x = "Stimuli Type", y = "Search Time", color = "Stimuli Type") +
theme_bw() +
guides(fill = FALSE) +
scale_color_manual(values = c("#0072B2", "#E69F00", "#009E73")) +
scale_fill_manual(values = c("#0072B2", "#E69F00", "#009E73")) +
theme(legend.position="none")
p1 + geom_pointrange(aes(ymin = (mean_RT_type - (sd * 1.96)/sqrt(50)), ymax = (mean_RT_type + (sd * 1.96)/sqrt(50))), data = mean_RT2)
m1 = lme(mean_RT_type ~ condition * stimuli_type, random= ~1|ID, data=mean_RT)
Anova(m1, type=c("III"))
#format( 8.097e-05, scientific = FALSE)
bayes_m1 <- anovaBF(mean_RT_type ~ condition * stimuli_type + ID,
data = mean_RT, whichRandom = "ID") # Bayesian mixed effects ANOVA
bayes_m1
mean_RT$stimuli_type <- as.factor(mean_RT$stimuli_type)
mean_RT$condition <- as.factor(mean_RT$condition)
mean_RT$ID <- as.character(mean_RT$ID)
mean_RT2 <- mean_RT %>%
group_by(stimuli_type, condition) %>%
summarise(sd = sd(mean_RT_type),
mean_RT_type = mean(mean_RT_type))
mean_RT2 <- mean_RT2 %>% arrange(mean_RT2$condition)
p1 <- ggplot(mean_RT, aes(x = stimuli_type, y = mean_RT_type)) +
geom_violin(aes(fill = stimuli_type), alpha = 0.4, trim = FALSE, color = NA) + #show.legend = FALSE,
geom_jitter(aes(color = stimuli_type), position = position_jitter(0.2), alpha = 0.8) +
facet_wrap(~condition) +
labs(x = "Stimuli Type", y = "Search Time", color = "Stimuli Type") +
theme_bw() +
guides(fill = FALSE) +
scale_color_manual(values = c("#0072B2", "#E69F00", "#009E73")) +
scale_fill_manual(values = c("#0072B2", "#E69F00", "#009E73")) +
theme(legend.position="none")
p1 + geom_pointrange(aes(ymin = (mean_RT_type - (sd * 1.96)/sqrt(50)), ymax = (mean_RT_type + (sd * 1.96)/sqrt(50))), data = mean_RT2)
m1 = lme(mean_RT_type ~ condition * stimuli_type, random= ~1|ID, data=mean_RT)
Anova(m1, type=c("III"))
#format( 8.097e-05, scientific = FALSE)
bayes_m1 <- anovaBF(mean_RT_type ~ condition * stimuli_type + ID,
data = mean_RT, whichRandom = "ID") # Bayesian mixed effects ANOVA
mean_RT$stimuli_type <- as.factor(mean_RT$stimuli_type)
mean_RT$condition <- as.factor(mean_RT$condition)
mean_RT$ID <- as.factor(mean_RT$ID)
mean_RT2 <- mean_RT %>%
group_by(stimuli_type, condition) %>%
summarise(sd = sd(mean_RT_type),
mean_RT_type = mean(mean_RT_type))
mean_RT2 <- mean_RT2 %>% arrange(mean_RT2$condition)
p1 <- ggplot(mean_RT, aes(x = stimuli_type, y = mean_RT_type)) +
geom_violin(aes(fill = stimuli_type), alpha = 0.4, trim = FALSE, color = NA) + #show.legend = FALSE,
geom_jitter(aes(color = stimuli_type), position = position_jitter(0.2), alpha = 0.8) +
facet_wrap(~condition) +
labs(x = "Stimuli Type", y = "Search Time", color = "Stimuli Type") +
theme_bw() +
guides(fill = FALSE) +
scale_color_manual(values = c("#0072B2", "#E69F00", "#009E73")) +
scale_fill_manual(values = c("#0072B2", "#E69F00", "#009E73")) +
theme(legend.position="none")
p1 + geom_pointrange(aes(ymin = (mean_RT_type - (sd * 1.96)/sqrt(50)), ymax = (mean_RT_type + (sd * 1.96)/sqrt(50))), data = mean_RT2)
m1 = lme(mean_RT_type ~ condition * stimuli_type, random= ~1|ID, data=mean_RT)
Anova(m1, type=c("III"))
#format( 8.097e-05, scientific = FALSE)
bayes_m1 <- anovaBF(mean_RT_type ~ condition * stimuli_type + ID,
data = mean_RT, whichRandom = "ID") # Bayesian mixed effects ANOVA
bayes_m1
m1
anova(m1)
Anova(m1, type=c("III"))
install.packages("brms")
library(brms)
brms::brm(mean_RT_type ~ condition * stimuli_type + (1 | ID), data = mean_RT)
m
brms::brm(mean_RT_type ~ condition * stimuli_type + (1 | ID), data = mean_RT)
knitr::opts_chunk$set(
eval = TRUE,
echo = FALSE,
message = FALSE,
warning = FALSE
)
library(tidyverse)
library(ggpubr)
library(rstatix)
library(rmarkdown)
library(multcomp)
library(dplyr)
library(ggstance)
library(emmeans)
library(car)
library(broom)
library(readr)
library(jmv)
library(knitr)
library(lme4)
library(nlme)
#set R language to English
Sys.setenv(lang = "en_UK")
#Data paths Marta
data_path_VR <- "~/6. VR Study/VR_Method/VR_Method"
data_path_PC <- "~/6. VR Study/VR_Method/VR_Method/RAW PC/PC attention data RAW-kopi"
#Data paths Rasmus
#data_path_VR <- "/Users/rasmus/Desktop/VR_Method"
#data_path_PC <- "/Users/rasmus/Desktop/VR_Method/RAW PC/PC attention data RAW-kopi"
mean_RT$stimuli_type <- as.factor(mean_RT$stimuli_type)
mean_RT$condition <- as.factor(mean_RT$condition)
mean_RT$ID <- as.factor(mean_RT$ID)
mean_RT2 <- mean_RT %>%
group_by(stimuli_type, condition) %>%
summarise(sd = sd(mean_RT_type),
mean_RT_type = mean(mean_RT_type))
mean_RT2 <- mean_RT2 %>% arrange(mean_RT2$condition)
p1 <- ggplot(mean_RT, aes(x = stimuli_type, y = mean_RT_type)) +
geom_violin(aes(fill = stimuli_type), alpha = 0.4, trim = FALSE, color = NA) + #show.legend = FALSE,
geom_jitter(aes(color = stimuli_type), position = position_jitter(0.2), alpha = 0.8) +
facet_wrap(~condition) +
labs(x = "Stimuli Type", y = "Search Time", color = "Stimuli Type") +
theme_bw() +
guides(fill = FALSE) +
scale_color_manual(values = c("#0072B2", "#E69F00", "#009E73")) +
scale_fill_manual(values = c("#0072B2", "#E69F00", "#009E73")) +
theme(legend.position="none")
p1 + geom_pointrange(aes(ymin = (mean_RT_type - (sd * 1.96)/sqrt(50)), ymax = (mean_RT_type + (sd * 1.96)/sqrt(50))), data = mean_RT2)
m1 = lme(mean_RT_type ~ condition * stimuli_type, random= ~1|ID, data=mean_RT)
Anova(m1, type=c("III"))
#format( 8.097e-05, scientific = FALSE)
mean_RTCV <- as.data.frame(ATTENTION %>%
group_by(ID, condition) %>%
summarise(mean_RTCV_type=mean(RTCV)))
View(mean_RTCV)
mean_RT$condition <- as.factor(mean_RT$condition)
mean_RT$ID <- as.factor(mean_RT$ID)
mean_RTCV2 <- mean_RTCV %>%
group_by(condition) %>%
summarise(sd = sd(mean_RTCV_type),
mean_RTCV_type = mean(mean_RTCV_type))
View(mean_RTCV2)
p1 <- ggplot(mean_RTCV, aes(x = condition, y = mean_RTCV_type)) +
geom_violin(aes(fill = condition), alpha = 0.4, trim = FALSE, color = NA) + #show.legend = FALSE,
geom_jitter(aes(color = condition), position = position_jitter(0.2), alpha = 0.8) +
labs(x = "Environment", y = "RT Variability", color = "Condition") +
theme_bw() +
guides(fill = FALSE) +
scale_color_manual(values = c("#0072B2", "#E69F00")) +
scale_fill_manual(values = c("#0072B2", "#E69F00")) +
theme(legend.position="none")
p1 + geom_pointrange(aes(ymin = (mean_RTCV_type - (sd * 1.96)/sqrt(50)), ymax = (mean_RTCV_type + (sd * 1.96)/sqrt(50))), data = mean_RTCV2)
m1 = lme(mean_RTCV_type ~ condition, random= ~1|ID, data=mean_RTCV)
Anova(m1, type=c("III"))
View(mean_accuracy)
mean_accuracy$stimuli_type <- as.factor(mean_accuracy$stimuli_type)
mean_accuracy$condition <- as.factor(mean_accuracy$condition)
mean_accuracy$ID <- as.factor(mean_accuracy$ID)
mean_accuracy2 <- mean_accuracy %>%
group_by(stimuli_type, condition) %>%
summarise(sd = sd(mean_acc_type),
mean_acc_type = mean(mean_acc_type))
mean_accuracy2 <- mean_accuracy2 %>% arrange(mean_accuracy2$condition)
View(mean_accuracy2)
mean_accuracy$stimuli_type <- as.factor(mean_accuracy$stimuli_type)
mean_accuracy$condition <- as.factor(mean_accuracy$condition)
mean_accuracy$ID <- as.factor(mean_accuracy$ID)
mean_accuracy2 <- mean_accuracy %>%
group_by(stimuli_type, condition) %>%
summarise(sd = sd(mean_acc_type),
mean_acc_type = mean(mean_acc_type))
mean_accuracy2 <- mean_accuracy2 %>% arrange(mean_accuracy2$condition)
p3 <- ggplot(mean_accuracy, aes(x = stimuli_type, y = mean_acc_type)) +
geom_violin(aes(fill = stimuli_type), alpha = 0.4, trim = FALSE, color = NA) + #show.legend = FALSE,
geom_jitter(aes(color = stimuli_type), position = position_jitter(0.2), alpha = 0.8) +
facet_wrap(~condition) +
labs(x = "Stimuli Type", y = "Accuracy", color = "Stimuli Type") +
theme_bw() +
guides(fill = FALSE) +
scale_color_manual(values = c("#0072B2", "#E69F00", "#009E73")) +
scale_fill_manual(values = c("#0072B2", "#E69F00", "#009E73")) +
theme(legend.position="none")
p3 + geom_pointrange(aes(ymin = (mean_acc_type - (sd * 1.96)/sqrt(50)), ymax = (mean_acc_type + (sd * 1.96)/sqrt(50))), data = mean_accuracy2)
m3 = lme(mean_acc_type ~ condition * stimuli_type, random= ~1|ID, data=mean_accuracy)
Anova(m3, type=c("III"))
p3 <- ggplot(mean_accuracy, aes(x = stimuli_type, y = mean_acc_type)) +
geom_violin(aes(fill = stimuli_type), alpha = 0.4, trim = FALSE, color = NA) + #show.legend = FALSE,
geom_jitter(aes(color = stimuli_type), position = position_jitter(0.2), alpha = 0.8) +
facet_wrap(~condition) +
labs(x = "Stimuli Type", y = "Accuracy", color = "Stimuli Type") +
theme_bw() +
guides(fill = FALSE) +
scale_color_manual(values = c("#0072B2", "#E69F00", "#009E73")) +
scale_fill_manual(values = c("#0072B2", "#E69F00", "#009E73")) +
theme(legend.position="none")
p3 + geom_pointrange(aes(ymin = (mean_acc_type - (sd * 1.96)/sqrt(50)), ymax = (mean_acc_type + (sd * 1.96)/sqrt(50))), data = mean_accuracy2)
my_colors <- c("#0072B2", "#D55E00")
summary_stats <- ATTENTION %>%
group_by(condition,cost_benefit,stimuli_type ) %>%
get_summary_stats(cost_ben_val, type = "mean_sd")
ggplot(summary_stats, aes(x = stimuli_type, y = mean, fill = cost_benefit)) +
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(~condition) +
scale_fill_manual(values = my_colors) +
labs(x = "Stimuli Type", y = "search time difffrence", fill = "cost/benefit")
# group the data by both "cost_benefit" and "stimuli_type" and perform a paired t-test on the "cost benefit value"
# Next, we compare the condition and adjust the p-values using the Bonferroni correction.
# this was done to find diffrences between the conditions. based on the stimuli type.
ATTENTION %>%
filter(!is.na(cost_ben_val)) %>%
group_by(cost_benefit, stimuli_type) %>%
t_test(cost_ben_val ~ condition ,
p.adjust.method = "bonferroni",
paired = T)
View(mean_att_ben)
View(mean_att_cost)
mean_att_cost$stimuli_type <- as.factor(mean_att_cost$stimuli_type)
mean_att_cost$condition <- as.factor(mean_att_cost$condition)
mean_att_cost$ID <- as.factor(mean_aatt_cost$ID)
mean_att_cost$ID <- as.factor(mean_at_cost$ID)
mean_att_cost$stimuli_type <- as.factor(mean_att_cost$stimuli_type)
mean_att_cost$condition <- as.factor(mean_att_cost$condition)
mean_att_cost$ID <- as.factor(mean_at_cost$ID)
mean_att_cost$ID <- as.factor(mean_att_cost$ID)
mean_att_cost2 <- mean_att_cost %>%
group_by(stimuli_type, condition) %>%
summarise(sd = sd(mean_att_cost_type),
mean_att_cost_type = mean(mean_att_cost_type))
mean_att_cost2 <- mean_att_cost2 %>% arrange(mean_att_cost2$condition)
View(mean_att_cost2)
m4 = lme(mean_att_cost_type ~ condition * stimuli_type, random= ~1|ID, data=mean_att_cost)
Anova(m4, type=c("III"))
View(mean_att_ben)
mean_att_ben$stimuli_type <- as.factor(mean_att_ben$stimuli_type)
mean_att_ben$condition <- as.factor(mean_att_ben$condition)
mean_att_ben$ID <- as.factor(mean_att_ben$ID)
m4 = lme(mean_att_ben_type ~ condition * stimuli_type, random= ~1|ID, data=mean_att_ben)
Anova(m4, type=c("III"))
x <- anova(m1, type = c("III"))
x <- Anova(m1, type=c("III"))
x
x$`Pr(>Chisq)`
format(x$`Pr(>Chisq)`, scientific = FALSE)
format(x$`Pr(>Chisq)`, scientific = FALSE)[2]
format(x$`Pr(>Chisq)`, scientific = FALSE)[2]/5
(format(x$`Pr(>Chisq)`, scientific = FALSE)[2])/5
as.numeric(format(x$`Pr(>Chisq)`, scientific = FALSE)[2])
as.numeric(format(x$`Pr(>Chisq)`, scientific = FALSE)[2])/5
as.numeric(format(x$`Pr(>Chisq)`, scientific = FALSE)[2])*5
a1 <- Anova(m1, type=c("III"))
a1
str(a1)
View(a1)
colnames(a1) <- c("Chisq", "Df", "Pr")
as.numeric(format(a1$Pr, scientific = FALSE)[2])*5
mean_RT$stimuli_type <- as.factor(mean_RT$stimuli_type)
mean_RT$condition <- as.factor(mean_RT$condition)
mean_RT$ID <- as.factor(mean_RT$ID)
mean_RT2 <- mean_RT %>%
group_by(stimuli_type, condition) %>%
summarise(sd = sd(mean_RT_type),
mean_RT_type = mean(mean_RT_type))
mean_RT2 <- mean_RT2 %>% arrange(mean_RT2$condition)
p1 <- ggplot(mean_RT, aes(x = stimuli_type, y = mean_RT_type)) +
geom_violin(aes(fill = stimuli_type), alpha = 0.4, trim = FALSE, color = NA) + #show.legend = FALSE,
geom_jitter(aes(color = stimuli_type), position = position_jitter(0.2), alpha = 0.8) +
facet_wrap(~condition) +
labs(x = "Stimuli Type", y = "Search Time", color = "Stimuli Type") +
theme_bw() +
guides(fill = FALSE) +
scale_color_manual(values = c("#0072B2", "#E69F00", "#009E73")) +
scale_fill_manual(values = c("#0072B2", "#E69F00", "#009E73")) +
theme(legend.position="none")
p1 + geom_pointrange(aes(ymin = (mean_RT_type - (sd * 1.96)/sqrt(50)), ymax = (mean_RT_type + (sd * 1.96)/sqrt(50))), data = mean_RT2)
m1 = lme(mean_RT_type ~ condition * stimuli_type, random= ~1|ID, data=mean_RT)
a1 <- Anova(m1, type=c("III"))
a1
colnames(a1) <- c("Chisq", "Df", "Pr")
mean_RTCV <- as.data.frame(ATTENTION %>%
group_by(ID, condition) %>%
summarise(mean_RTCV_type=mean(RTCV)))
mean_RT$condition <- as.factor(mean_RT$condition)
mean_RT$ID <- as.factor(mean_RT$ID)
mean_RTCV2 <- mean_RTCV %>%
group_by(condition) %>%
summarise(sd = sd(mean_RTCV_type),
mean_RTCV_type = mean(mean_RTCV_type))
p2 <- ggplot(mean_RTCV, aes(x = condition, y = mean_RTCV_type)) +
geom_violin(aes(fill = condition), alpha = 0.4, trim = FALSE, color = NA) + #show.legend = FALSE,
geom_jitter(aes(color = condition), position = position_jitter(0.2), alpha = 0.8) +
labs(x = "Environment", y = "RT Variability", color = "Condition") +
theme_bw() +
guides(fill = FALSE) +
scale_color_manual(values = c("#0072B2", "#E69F00")) +
scale_fill_manual(values = c("#0072B2", "#E69F00")) +
theme(legend.position="none")
p2 + geom_pointrange(aes(ymin = (mean_RTCV_type - (sd * 1.96)/sqrt(50)), ymax = (mean_RTCV_type + (sd * 1.96)/sqrt(50))), data = mean_RTCV2)
m2 = lme(mean_RTCV_type ~ condition, random= ~1|ID, data=mean_RTCV)
a2 <- Anova(m2, type=c("III"))
a2
colnames(a2) <- c("Chisq", "Df", "Pr")
TukeyHSD(m3, conf.level=.95)
#Posthoc
post-hoc<- aov(formula = mean_acc_type ~ stimuli_type, data = mean_accuracy)
#Posthoc
post_hoc<- aov(formula = mean_acc_type ~ stimuli_type, data = mean_accuracy)
TukeyHSD(post_hoc, conf.level=.95)
p3 <- ggplot(mean_accuracy, aes(x = stimuli_type, y = mean_acc_type)) +
geom_violin(aes(fill = stimuli_type), alpha = 0.4, trim = FALSE, color = NA) + #show.legend = FALSE,
geom_jitter(aes(color = stimuli_type), position = position_jitter(0.2), alpha = 0.8) +
facet_wrap(~condition) +
labs(x = "Stimuli Type", y = "Accuracy", color = "Stimuli Type") +
theme_bw() +
guides(fill = FALSE) +
scale_color_manual(values = c("#0072B2", "#E69F00", "#009E73")) +
scale_fill_manual(values = c("#0072B2", "#E69F00", "#009E73")) +
theme(legend.position="none")
p3 + geom_pointrange(aes(ymin = (mean_acc_type - (sd * 1.96)/sqrt(50)), ymax = (mean_acc_type + (sd * 1.96)/sqrt(50))), data = mean_accuracy2)
format(a1$Pr, scientific = FALSE)[2])*5
as.numeric(format(a1$Pr, scientific = FALSE)[2])*5
as.numeric(format(a1$Pr, scientific = FALSE)[3])*5
as.numeric(format(a1$Pr, scientific = FALSE)[4])*5
as.numeric(format(a1$Pr, scientific = FALSE)[2])*5
pvalue <- as.numeric(format(a1$Pr, scientific = FALSE)[2])*5 #for some reason this does not want to print in the wordfile so I assigned it to an object
format(pvalue, scientific == FALSE)
format(pvalue, scientific = FALSE)
