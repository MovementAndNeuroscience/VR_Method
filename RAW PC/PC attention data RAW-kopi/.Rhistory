# neutral_and_audio
neutral_and_audio1 <-
subset(
myData,
Answer.Codes.Block1 == "1" &
Presented.Condition.Block1 == "Neutral" &
Distractor.Modality.Block1 == "audio"
)
if (is_empty(neutral_and_audio1$ReactionTime.Block1) == TRUE) {
DF$neutral_and_audio_RT[i] <- NA
DF$neutral_and_audio_RT_sd[i] <- NA
} else{
DF$neutral_and_audio_RT[i] <- mean(neutral_and_audio1$ReactionTime.Block1)
DF$neutral_and_audio_RT_sd[i] <- sd(neutral_and_audio1$ReactionTime.Block1)
}
if (is_empty(neutral_and_audio1$ReactionTime.Block1) == TRUE) {
DF$Correct_answers_neutral_and_audio[i] <- NA
} else{
DF$Correct_answers_neutral_and_audio[i] <-
length(neutral_and_audio1$Answers.Block1)/16
}
# neutral_and_visual
neutral_and_visual1 <-
subset(
myData,
Answer.Codes.Block1 == "1" &
Presented.Condition.Block1 == "Neutral" &
Distractor.Modality.Block1 == "visual"
)
if (is_empty(neutral_and_visual1$ReactionTime.Block1) == TRUE) {
DF$neutral_and_visual_RT[i] <- NA
DF$neutral_and_visual_RT_sd[i] <- NA
} else{
DF$neutral_and_visual_RT[i] <- mean(neutral_and_visual1$ReactionTime.Block1)
DF$neutral_and_visual_RT_sd[i] <- sd(neutral_and_visual1$ReactionTime.Block1)
}
if (is_empty(neutral_and_visual1$ReactionTime.Block1) == TRUE) {
DF$Correct_answers_neutral_and_visual[i] <- NA
} else{
DF$Correct_answers_neutral_and_visual[i] <-
length(neutral_and_visual1$Answers.Block1)/16
}
# neutral_and_visual and audio
neutral_and_audio.visual1 <-
subset(
myData,
Answer.Codes.Block1 == "1" &
Presented.Condition.Block1 == "Neutral" &
Distractor.Modality.Block1 == "audio visual"
)
if (is_empty(neutral_and_audio.visual1$ReactionTime.Block1) == TRUE) {
DF$neutral_and_audio.visual_RT[i] <- NA
DF$neutral_and_audio.visual_RT_sd[i] <- NA
} else{
DF$neutral_and_audio.visual_RT[i] <- mean(neutral_and_audio.visual1$ReactionTime.Block1)
DF$neutral_and_audio.visual_RT_sd[i] <- sd(neutral_and_audio.visual1$ReactionTime.Block1)
}
if (is_empty(neutral_and_audio.visual1$ReactionTime.Block1) == TRUE) {
DF$Correct_answers_neutral_and_audio.visual[i] = 0
} else{
DF$Correct_answers_neutral_and_audio.visual[i] <-
length(neutral_and_audio.visual1$Answers.Block1)/16
}
}
# A temporary data set to hold the information from the VR data, so we can reuse this loop for the PC files.
VR_not_done <- DF
View(VR_not_done)
i
# This section of the script is responsible for importing data from the designated folder.
# The data is imported in a long and tidy format is to ensure that the data can be easily manipulated and analyzed using tidyverse.
#The task that the data were recorded for is a multisensory selective attention task. There are two conditions - VR and PC. The data for these conditons are kept in different folders.Each folder has a .csv file, semicolon separated, for each participant.
#_______________VR__________________________#
# Import all data for the VR condition.
# Set working directory
setwd("~/6. VR Study/VR_Method/RAW PC/PC attention data RAW-kopi")
# Look in the directory and search for CSV files.
myList <- list.files(pattern = ".csv", recursive = TRUE) #not quite good to name a list "list" becaue it might get confuisng in R at some point
#Create and empty data frame to extract the data
#The data frame includes columns for mean RTs, RT SDs and Accuracy. These are extracted for three multisensory modalities (auditory, visual and audio-visual) and three congruency types (congruent, incongruent and neutral). So there are 9 types of trials (3x3) and each type of trial has mean RT, RT SD and Accuracy extracted (9 x 3) resulting in 27 data columns. For Reaction time data - only correct trials are used
DF <- data.frame(matrix(nrow = length(myList), ncol=28))
colnames(DF) <- c("id", "incongruent_and_audio_RT", "incongruent_and_audio_RT_sd", "Correct_answers_incongruent_and_audio", "incongruent_and_visual_RT", "incongruent_and_visual_RT_sd", "Correct_answers_incongruent_and_visual", "incongruent_and_audio.visual_RT", "incongruent_and_audio.visual_RT_sd",  "Correct_answers_incongruent_and_audio.visual", "congruent_and_audio_RT", "congruent_and_audio_RT_sd", "Correct_answers_congruent_and_audio", "congruent_and_visual_RT", "congruent_and_visual_RT_sd", "Correct_answers_congruent_and_visual", "congruent_and_audio.visual_RT", "congruent_and_audio.visual_RT_sd", "Correct_answers_congruent_and_audio.visual", "neutral_and_audio_RT", "neutral_and_audio_RT_sd", "Correct_answers_neutral_and_audio", "neutral_and_visual_RT",   "neutral_and_visual_RT_sd", "Correct_answers_neutral_and_visual", "neutral_and_audio.visual_RT", "neutral_and_audio.visual_RT_sd", "Correct_answers_neutral_and_audio.visual")
#Loop through the files to extract data for the DF
# "i" represents the current participant and is set to loop through all files in the directory.
# It is set to loop from 1 to the length of the list of files in our directory.
for (i in 1:length(myList))
{
myData_base <- read.csv(myList[i], sep = ";", stringsAsFactors = FALSE) #import base data where all columns will be character values
myData <- myData_base %>% mutate_if(is.character, as.numeric) # make all values numeric
myData$Presented.Condition.Block1 <- myData_base$Presented.Condition.Block1 #replace the character columns with the base data
myData$Answers.Block1 <- myData_base$Answers.Block1
myData$Distractor.Modality.Block1 <- myData_base$Distractor.Modality.Block1
# Extract Participants number
DF$id[i] <- substr(myList[i], 1, 5) # take characters 25-39 from the name of the file
## Extract Data for Incongruent Trials
# Incongruent_and_audio
incongruent_and_audio1 <-
subset(
myData,
Answer.Codes.Block1 == "1" &
Presented.Condition.Block1 == "Incongruent" &
Distractor.Modality.Block1 == "audio"
)
if (is_empty(incongruent_and_audio1$ReactionTime.Block1) == TRUE) {
DF$incongruent_and_audio_RT[i] <- NA # these should be NAs rather than 0 to help with data management
DF$incongruent_and_audio_RT_sd[i] <- NA
} else{
DF$incongruent_and_audio_RT[i] <- mean(incongruent_and_audio1$ReactionTime.Block1)
DF$incongruent_and_audio_RT_sd[i] <- sd(incongruent_and_audio1$ReactionTime.Block1)
}
if (is_empty(incongruent_and_audio1$ReactionTime.Block1) == TRUE) {
DF$Correct_answers_incongruent_and_audio[i] <- NA
} else{
DF$Correct_answers_incongruent_and_audio[i] <-
length(incongruent_and_audio1$Answers.Block1)/16 #Here accuracy should be a ratio value, there are 16 possible correct trials
}
# incongruent_and_visual
incongruent_and_visual1 <-
subset(
myData,
Answer.Codes.Block1 == "1" &
Presented.Condition.Block1 == "Incongruent" &
Distractor.Modality.Block1 == "visual"
)
if (is_empty(incongruent_and_visual1$ReactionTime.Block1) == TRUE) {
DF$incongruent_and_visual_RT[i] <- NA
DF$incongruent_and_visual_RT_sd[i] <- NA
} else{
DF$incongruent_and_visual_RT[i] <- mean(incongruent_and_visual1$ReactionTime.Block1)
DF$incongruent_and_visual_RT_sd[i] <- sd(incongruent_and_visual1$ReactionTime.Block1)
}
if (is_empty(incongruent_and_visual1$ReactionTime.Block1) == TRUE) {
DF$Correct_answers_incongruent_and_visual[i] <- NA
} else{
DF$Correct_answers_incongruent_and_visual[i] <-
length(incongruent_and_visual1$Answers.Block1)/16
}
# incongruent_and_visual and audio
incongruent_and_audio.visual1 <-
subset(
myData,
Answer.Codes.Block1 == "1" &
Presented.Condition.Block1 == "Incongruent" &
Distractor.Modality.Block1 == "audio visual"
)
if (is_empty(incongruent_and_audio.visual1$ReactionTime.Block1) == TRUE) {
DF$incongruent_and_audio.visual_RT[i] <- NA
DF$incongruent_and_audio.visual_RT_sd[i] <- NA
} else{
DF$incongruent_and_audio.visual_RT[i] <-
mean(incongruent_and_audio.visual1$ReactionTime.Block1)
DF$incongruent_and_audio.visual_RT_sd[i] <-
sd(incongruent_and_audio.visual1$ReactionTime.Block1)
}
if (is_empty(incongruent_and_audio.visual1$ReactionTime.Block1) == TRUE) {
DF$Correct_answers_incongruent_and_audio.visual[i] <- NA
} else{
DF$Correct_answers_incongruent_and_audio.visual[i] <-
length(incongruent_and_audio.visual1$Answers.Block1)/16
}
## Extract Data for Congruent Trials
# congruent_and_audio
congruent_and_audio1 <-
subset(
myData,
Answer.Codes.Block1 == "1" &
Presented.Condition.Block1 == "Congruent" &
Distractor.Modality.Block1 == "audio"
)
if (is_empty(congruent_and_audio1$ReactionTime.Block1) == TRUE) {
DF$congruent_and_audio_RT[i] <- NA
DF$congruent_and_audio_RT_sd[i] <- NA
} else{
DF$congruent_and_audio_RT[i] <- mean(congruent_and_audio1$ReactionTime.Block1)
DF$congruent_and_audio_RT_sd[i] <- sd(congruent_and_audio1$ReactionTime.Block1)
}
if (is_empty(congruent_and_audio1$ReactionTime.Block1) == TRUE) {
DF$Correct_answers_congruent_and_audio[i] <- NA
} else{
DF$Correct_answers_congruent_and_audio[i] <-
length(congruent_and_audio1$Answers.Block1)/16
}
# congruent_and_visual
congruent_and_visual1 <-
subset(
myData,
Answer.Codes.Block1 == "1" &
Presented.Condition.Block1 == "Congruent" &
Distractor.Modality.Block1 == "visual"
)
if (is_empty(congruent_and_visual1$ReactionTime.Block1) == TRUE) {
DF$congruent_and_visual_RT[i] <- NA
DF$congruent_and_visual_RT_sd[i] <- NA
} else{
DF$congruent_and_visual_RT[i] <- mean(congruent_and_visual1$ReactionTime.Block1)
DF$congruent_and_visual_RT_sd[i] <- sd(congruent_and_visual1$ReactionTime.Block1)
}
if (is_empty(congruent_and_visual1$ReactionTime.Block1) == TRUE) {
DF$Correct_answers_congruent_and_visual[i] <- NA
} else{
DF$Correct_answers_congruent_and_visual[i] <-
length(congruent_and_visual1$Answers.Block1)/16
}
# congruent_and_visual and audio
congruent_and_audio.visual1 <-
subset(
myData,
Answer.Codes.Block1 == "1" &
Presented.Condition.Block1 == "Congruent" &
Distractor.Modality.Block1 == "audio visual"
)
if (is_empty(congruent_and_audio.visual1$ReactionTime.Block1) == TRUE) {
DF$congruent_and_audio.visual_RT[i] <- NA
DF$congruent_and_audio.visual_RT_sd[i] <- NA
} else{
DF$congruent_and_audio.visual_RT[i] <- mean(congruent_and_audio.visual1$ReactionTime.Block1)
DF$congruent_and_audio.visual_RT_sd[i] <- sd(congruent_and_audio.visual1$ReactionTime.Block1)
}
if (is_empty(congruent_and_audio.visual1$ReactionTime.Block1) == TRUE) {
DF$Correct_answers_congruent_and_audio.visual[i] <- NA
} else{
DF$Correct_answers_congruent_and_audio.visual[i] <-
length(congruent_and_audio.visual1$Answers.Block1)/16
}
## Extract Data for Neutral trials
# neutral_and_audio
neutral_and_audio1 <-
subset(
myData,
Answer.Codes.Block1 == "1" &
Presented.Condition.Block1 == "Neutral" &
Distractor.Modality.Block1 == "audio"
)
if (is_empty(neutral_and_audio1$ReactionTime.Block1) == TRUE) {
DF$neutral_and_audio_RT[i] <- NA
DF$neutral_and_audio_RT_sd[i] <- NA
} else{
DF$neutral_and_audio_RT[i] <- mean(neutral_and_audio1$ReactionTime.Block1)
DF$neutral_and_audio_RT_sd[i] <- sd(neutral_and_audio1$ReactionTime.Block1)
}
if (is_empty(neutral_and_audio1$ReactionTime.Block1) == TRUE) {
DF$Correct_answers_neutral_and_audio[i] <- NA
} else{
DF$Correct_answers_neutral_and_audio[i] <-
length(neutral_and_audio1$Answers.Block1)/16
}
# neutral_and_visual
neutral_and_visual1 <-
subset(
myData,
Answer.Codes.Block1 == "1" &
Presented.Condition.Block1 == "Neutral" &
Distractor.Modality.Block1 == "visual"
)
if (is_empty(neutral_and_visual1$ReactionTime.Block1) == TRUE) {
DF$neutral_and_visual_RT[i] <- NA
DF$neutral_and_visual_RT_sd[i] <- NA
} else{
DF$neutral_and_visual_RT[i] <- mean(neutral_and_visual1$ReactionTime.Block1)
DF$neutral_and_visual_RT_sd[i] <- sd(neutral_and_visual1$ReactionTime.Block1)
}
if (is_empty(neutral_and_visual1$ReactionTime.Block1) == TRUE) {
DF$Correct_answers_neutral_and_visual[i] <- NA
} else{
DF$Correct_answers_neutral_and_visual[i] <-
length(neutral_and_visual1$Answers.Block1)/16
}
# neutral_and_visual and audio
neutral_and_audio.visual1 <-
subset(
myData,
Answer.Codes.Block1 == "1" &
Presented.Condition.Block1 == "Neutral" &
Distractor.Modality.Block1 == "audio visual"
)
if (is_empty(neutral_and_audio.visual1$ReactionTime.Block1) == TRUE) {
DF$neutral_and_audio.visual_RT[i] <- NA
DF$neutral_and_audio.visual_RT_sd[i] <- NA
} else{
DF$neutral_and_audio.visual_RT[i] <- mean(neutral_and_audio.visual1$ReactionTime.Block1)
DF$neutral_and_audio.visual_RT_sd[i] <- sd(neutral_and_audio.visual1$ReactionTime.Block1)
}
if (is_empty(neutral_and_audio.visual1$ReactionTime.Block1) == TRUE) {
DF$Correct_answers_neutral_and_audio.visual[i] = 0
} else{
DF$Correct_answers_neutral_and_audio.visual[i] <-
length(neutral_and_audio.visual1$Answers.Block1)/16
}
}
# A temporary data set to hold the information from the VR data, so we can reuse this loop for the PC files.
VR_not_done <- DF
# This section of the script is responsible for importing data from the designated folder.
# The data is imported in a long and tidy format is to ensure that the data can be easily manipulated and analyzed using tidyverse.
#The task that the data were recorded for is a multisensory selective attention task. There are two conditions - VR and PC. The data for these conditons are kept in different folders.Each folder has a .csv file, semicolon separated, for each participant.
#_______________VR__________________________#
# Import all data for the VR condition.
# Set working directory
setwd("~/6. VR Study/VR_Method/RAW PC/PC attention data RAW-kopi")
# Look in the directory and search for CSV files.
myList <- list.files(pattern = ".csv", recursive = TRUE) #not quite good to name a list "list" becaue it might get confuisng in R at some point
#Create and empty data frame to extract the data
#The data frame includes columns for mean RTs, RT SDs and Accuracy. These are extracted for three multisensory modalities (auditory, visual and audio-visual) and three congruency types (congruent, incongruent and neutral). So there are 9 types of trials (3x3) and each type of trial has mean RT, RT SD and Accuracy extracted (9 x 3) resulting in 27 data columns. For Reaction time data - only correct trials are used
DF <- data.frame(matrix(nrow = length(myList), ncol=28))
colnames(DF) <- c("id", "incongruent_and_audio_RT", "incongruent_and_audio_RT_sd", "Correct_answers_incongruent_and_audio", "incongruent_and_visual_RT", "incongruent_and_visual_RT_sd", "Correct_answers_incongruent_and_visual", "incongruent_and_audio.visual_RT", "incongruent_and_audio.visual_RT_sd",  "Correct_answers_incongruent_and_audio.visual", "congruent_and_audio_RT", "congruent_and_audio_RT_sd", "Correct_answers_congruent_and_audio", "congruent_and_visual_RT", "congruent_and_visual_RT_sd", "Correct_answers_congruent_and_visual", "congruent_and_audio.visual_RT", "congruent_and_audio.visual_RT_sd", "Correct_answers_congruent_and_audio.visual", "neutral_and_audio_RT", "neutral_and_audio_RT_sd", "Correct_answers_neutral_and_audio", "neutral_and_visual_RT",   "neutral_and_visual_RT_sd", "Correct_answers_neutral_and_visual", "neutral_and_audio.visual_RT", "neutral_and_audio.visual_RT_sd", "Correct_answers_neutral_and_audio.visual")
#Loop through the files to extract data for the DF
# "i" represents the current participant and is set to loop through all files in the directory.
# It is set to loop from 1 to the length of the list of files in our directory.
for (i in 1:length(myList))
{
myData_base <- read.csv(myList[i], sep = ";", stringsAsFactors = FALSE) #import base data where all columns will be character values
myData <- myData_base %>% mutate_if(is.character, as.numeric) # make all values numeric
myData$Presented.Condition.Block1 <- myData_base$Presented.Condition.Block1 #replace the character columns with the base data
myData$Answers.Block1 <- myData_base$Answers.Block1
myData$Distractor.Modality.Block1 <- myData_base$Distractor.Modality.Block1
# Extract Participants number
DF$id[i] <- substr(myList[i], 1, 5) # take characters 25-39 from the name of the file
## Extract Data for Incongruent Trials
# Incongruent_and_audio
incongruent_and_audio1 <-
subset(
myData,
Answer.Codes.Block1 == "1" &
Presented.Condition.Block1 == "Incongruent" &
Distractor.Modality.Block1 == "audio"
)
if (is_empty(incongruent_and_audio1$ReactionTime.Block1) == TRUE) {
DF$incongruent_and_audio_RT[i] <- NA # these should be NAs rather than 0, because RT of 0 is numerically misleading (i.e. it seems as though people responded in 0 seconds - this skews means etc later on)
DF$incongruent_and_audio_RT_sd[i] <- NA
} else{
DF$incongruent_and_audio_RT[i] <- mean(incongruent_and_audio1$ReactionTime.Block1)
DF$incongruent_and_audio_RT_sd[i] <- sd(incongruent_and_audio1$ReactionTime.Block1)
}
if (is_empty(incongruent_and_audio1$ReactionTime.Block1) == TRUE) {
DF$Correct_answers_incongruent_and_audio[i] <- 0
} else{
DF$Correct_answers_incongruent_and_audio[i] <-
length(incongruent_and_audio1$Answers.Block1)/16 #Here accuracy should be a ratio value, there are 16 possible correct trials
}
# incongruent_and_visual
incongruent_and_visual1 <-
subset(
myData,
Answer.Codes.Block1 == "1" &
Presented.Condition.Block1 == "Incongruent" &
Distractor.Modality.Block1 == "visual"
)
if (is_empty(incongruent_and_visual1$ReactionTime.Block1) == TRUE) {
DF$incongruent_and_visual_RT[i] <- NA
DF$incongruent_and_visual_RT_sd[i] <- NA
} else{
DF$incongruent_and_visual_RT[i] <- mean(incongruent_and_visual1$ReactionTime.Block1)
DF$incongruent_and_visual_RT_sd[i] <- sd(incongruent_and_visual1$ReactionTime.Block1)
}
if (is_empty(incongruent_and_visual1$ReactionTime.Block1) == TRUE) {
DF$Correct_answers_incongruent_and_visual[i] <- 0
} else{
DF$Correct_answers_incongruent_and_visual[i] <-
length(incongruent_and_visual1$Answers.Block1)/16
}
# incongruent_and_visual and audio
incongruent_and_audio.visual1 <-
subset(
myData,
Answer.Codes.Block1 == "1" &
Presented.Condition.Block1 == "Incongruent" &
Distractor.Modality.Block1 == "audio visual"
)
if (is_empty(incongruent_and_audio.visual1$ReactionTime.Block1) == TRUE) {
DF$incongruent_and_audio.visual_RT[i] <- NA
DF$incongruent_and_audio.visual_RT_sd[i] <- NA
} else{
DF$incongruent_and_audio.visual_RT[i] <-
mean(incongruent_and_audio.visual1$ReactionTime.Block1)
DF$incongruent_and_audio.visual_RT_sd[i] <-
sd(incongruent_and_audio.visual1$ReactionTime.Block1)
}
if (is_empty(incongruent_and_audio.visual1$ReactionTime.Block1) == TRUE) {
DF$Correct_answers_incongruent_and_audio.visual[i] <- 0
} else{
DF$Correct_answers_incongruent_and_audio.visual[i] <-
length(incongruent_and_audio.visual1$Answers.Block1)/16
}
## Extract Data for Congruent Trials
# congruent_and_audio
congruent_and_audio1 <-
subset(
myData,
Answer.Codes.Block1 == "1" &
Presented.Condition.Block1 == "Congruent" &
Distractor.Modality.Block1 == "audio"
)
if (is_empty(congruent_and_audio1$ReactionTime.Block1) == TRUE) {
DF$congruent_and_audio_RT[i] <- NA
DF$congruent_and_audio_RT_sd[i] <- NA
} else{
DF$congruent_and_audio_RT[i] <- mean(congruent_and_audio1$ReactionTime.Block1)
DF$congruent_and_audio_RT_sd[i] <- sd(congruent_and_audio1$ReactionTime.Block1)
}
if (is_empty(congruent_and_audio1$ReactionTime.Block1) == TRUE) {
DF$Correct_answers_congruent_and_audio[i] <- 0
} else{
DF$Correct_answers_congruent_and_audio[i] <-
length(congruent_and_audio1$Answers.Block1)/16
}
# congruent_and_visual
congruent_and_visual1 <-
subset(
myData,
Answer.Codes.Block1 == "1" &
Presented.Condition.Block1 == "Congruent" &
Distractor.Modality.Block1 == "visual"
)
if (is_empty(congruent_and_visual1$ReactionTime.Block1) == TRUE) {
DF$congruent_and_visual_RT[i] <- NA
DF$congruent_and_visual_RT_sd[i] <- NA
} else{
DF$congruent_and_visual_RT[i] <- mean(congruent_and_visual1$ReactionTime.Block1)
DF$congruent_and_visual_RT_sd[i] <- sd(congruent_and_visual1$ReactionTime.Block1)
}
if (is_empty(congruent_and_visual1$ReactionTime.Block1) == TRUE) {
DF$Correct_answers_congruent_and_visual[i] <- 0
} else{
DF$Correct_answers_congruent_and_visual[i] <-
length(congruent_and_visual1$Answers.Block1)/16
}
# congruent_and_visual and audio
congruent_and_audio.visual1 <-
subset(
myData,
Answer.Codes.Block1 == "1" &
Presented.Condition.Block1 == "Congruent" &
Distractor.Modality.Block1 == "audio visual"
)
if (is_empty(congruent_and_audio.visual1$ReactionTime.Block1) == TRUE) {
DF$congruent_and_audio.visual_RT[i] <- NA
DF$congruent_and_audio.visual_RT_sd[i] <- NA
} else{
DF$congruent_and_audio.visual_RT[i] <- mean(congruent_and_audio.visual1$ReactionTime.Block1)
DF$congruent_and_audio.visual_RT_sd[i] <- sd(congruent_and_audio.visual1$ReactionTime.Block1)
}
if (is_empty(congruent_and_audio.visual1$ReactionTime.Block1) == TRUE) {
DF$Correct_answers_congruent_and_audio.visual[i] <- 0
} else{
DF$Correct_answers_congruent_and_audio.visual[i] <-
length(congruent_and_audio.visual1$Answers.Block1)/16
}
## Extract Data for Neutral trials
# neutral_and_audio
neutral_and_audio1 <-
subset(
myData,
Answer.Codes.Block1 == "1" &
Presented.Condition.Block1 == "Neutral" &
Distractor.Modality.Block1 == "audio"
)
if (is_empty(neutral_and_audio1$ReactionTime.Block1) == TRUE) {
DF$neutral_and_audio_RT[i] <- NA
DF$neutral_and_audio_RT_sd[i] <- NA
} else{
DF$neutral_and_audio_RT[i] <- mean(neutral_and_audio1$ReactionTime.Block1)
DF$neutral_and_audio_RT_sd[i] <- sd(neutral_and_audio1$ReactionTime.Block1)
}
if (is_empty(neutral_and_audio1$ReactionTime.Block1) == TRUE) {
DF$Correct_answers_neutral_and_audio[i] <- 0
} else{
DF$Correct_answers_neutral_and_audio[i] <-
length(neutral_and_audio1$Answers.Block1)/16
}
# neutral_and_visual
neutral_and_visual1 <-
subset(
myData,
Answer.Codes.Block1 == "1" &
Presented.Condition.Block1 == "Neutral" &
Distractor.Modality.Block1 == "visual"
)
if (is_empty(neutral_and_visual1$ReactionTime.Block1) == TRUE) {
DF$neutral_and_visual_RT[i] <- NA
DF$neutral_and_visual_RT_sd[i] <- NA
} else{
DF$neutral_and_visual_RT[i] <- mean(neutral_and_visual1$ReactionTime.Block1)
DF$neutral_and_visual_RT_sd[i] <- sd(neutral_and_visual1$ReactionTime.Block1)
}
if (is_empty(neutral_and_visual1$ReactionTime.Block1) == TRUE) {
DF$Correct_answers_neutral_and_visual[i] <- 0
} else{
DF$Correct_answers_neutral_and_visual[i] <-
length(neutral_and_visual1$Answers.Block1)/16
}
# neutral_and_visual and audio
neutral_and_audio.visual1 <-
subset(
myData,
Answer.Codes.Block1 == "1" &
Presented.Condition.Block1 == "Neutral" &
Distractor.Modality.Block1 == "audio visual"
)
if (is_empty(neutral_and_audio.visual1$ReactionTime.Block1) == TRUE) {
DF$neutral_and_audio.visual_RT[i] <- NA
DF$neutral_and_audio.visual_RT_sd[i] <- NA
} else{
DF$neutral_and_audio.visual_RT[i] <- mean(neutral_and_audio.visual1$ReactionTime.Block1)
DF$neutral_and_audio.visual_RT_sd[i] <- sd(neutral_and_audio.visual1$ReactionTime.Block1)
}
if (is_empty(neutral_and_audio.visual1$ReactionTime.Block1) == TRUE) {
DF$Correct_answers_neutral_and_audio.visual[i] = 0
} else{
DF$Correct_answers_neutral_and_audio.visual[i] <-
length(neutral_and_audio.visual1$Answers.Block1)/16
}
}
# A temporary data set to hold the information from the VR data, so we can reuse this loop for the PC files.
VR_not_done <- DF
